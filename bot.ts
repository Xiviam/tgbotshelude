import { Bot } from "grammy";
import axios from "axios";
import dotenv from "dotenv";
dotenv.config();

import { sequelize, User } from "./db";
import { encrypt } from "./cryptoUtil";

const bot = new Bot(process.env.BOT_TOKEN!);

// üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã YYYY-MM-DD (+ —Å–º–µ—â–µ–Ω–∏–µ –ø–æ –¥–Ω—è–º)
function getLocalDateString(offsetDays = 0): string {
  const now = new Date();
  now.setDate(now.getDate() + offsetDays);
  const year = now.getFullYear();
  const month = String(now.getMonth() + 1).padStart(2, "0");
  const day = String(now.getDate()).padStart(2, "0");
  return `${year}-${month}-${day}`;
}

// üîπ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
function scheduleReminders(chatId: number, lessons: any[], date: string) {
  const now = new Date();

  for (const lesson of lessons) {
    const [hour, minute] = lesson.started_at.split(":").map(Number);

    const lessonTime = new Date(date + "T00:00:00");
    lessonTime.setHours(hour, minute, 0, 0);

    // –ó–∞ 5 –º–∏–Ω—É—Ç –¥–æ –ø–∞—Ä—ã
    const reminderTime = new Date(lessonTime.getTime() - 5 * 60 * 1000);
    const diff = reminderTime.getTime() - now.getTime();

    if (diff > 0) {
      setTimeout(() => {
        bot.api.sendMessage(
          chatId,
          `‚è∞ –ß–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –Ω–∞—á–Ω–µ—Ç—Å—è –ø–∞—Ä–∞!\n\nüìñ ${lesson.subject_name}\nüë®‚Äçüè´ ${lesson.teacher_name}\nüè´ ${lesson.room_name}`
        );
      }, diff);

      console.log(
        `–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞ ${chatId} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ ${reminderTime.toLocaleString()}`
      );
    }
  }
}

// üîπ –õ–æ–≥–∏–Ω —á–µ—Ä–µ–∑ API –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
async function loginAndSave(chatId: number, username: string, password: string) {
  try {
    const res = await axios.post(
      "https://msapi.top-academy.ru/api/v2/auth/login",
      {
        application_key: process.env.APPLICATION_KEY,
        id_city: null,
        username,
        password,
      },
      {
        headers: {
          "Content-Type": "application/json",
          Origin: "https://journal.top-academy.ru",
          Referer: "https://journal.top-academy.ru",
        },
      }
    );

    const auth = res.data;
    if (!auth || !auth.access_token) throw new Error("No access_token in response");

    await User.upsert({
      chatId,
      login: username,
      password: encrypt(password),
      accessToken: auth.access_token,
      refreshToken: auth.refresh_token,
      expiresAt: Date.now() + auth.expires_in_access * 1000,
      city_data: JSON.stringify(auth.city_data),
    });

    return auth.access_token;
  } catch (err: any) {
    console.error("Login error:", err.response?.data || err.message);
    throw new Error("Auth failed");
  }
}

// üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—É—é –¥–∞—Ç—É
async function getSchedule(chatId: number, date: string) {
  const user = await User.findOne({ where: { chatId } });
  if (!user) return "‚ùå –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å";

  const accessToken = user.getDataValue("accessToken");

  try {
    const res = await axios.get(
      "https://msapi.top-academy.ru/api/v2/schedule/operations/get-by-date",
      {
        params: { date_filter: date },
        headers: {
          Authorization: `Bearer ${accessToken}`,
          Accept: "application/json, text/plain, */*",
          Origin: "https://journal.top-academy.ru",
          Referer: "https://journal.top-academy.ru/",
          "User-Agent":
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36",
        },
      }
    );

    const lessons = res.data;
    if (!lessons || lessons.length === 0) {
      return `üì≠ –ù–∞ ${date} –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç`;
    }

    // –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    scheduleReminders(chatId, lessons, date);

    let text = `üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ ${date}:\n\n`;
    for (const lesson of lessons) {
      text +=
        `üî¢ –ü–∞—Ä–∞: ${lesson.lesson}\n` +
        `‚è∞ ${lesson.started_at} ‚Äì ${lesson.finished_at}\n` +
        `üìñ ${lesson.subject_name}\n` +
        `üë®‚Äçüè´ ${lesson.teacher_name}\n\n`
    }

    return text.trim();
  } catch (err: any) {
    console.error(err.response?.data || err.message);
    return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ";
  }
}

// üîπ –ö–æ–º–∞–Ω–¥–∞ /login
bot.command("login", async (ctx) => {
  const text = ctx.message?.text;
  if (!text) return ctx.reply("‚ùå –¢–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω");

  const parts = text.split(" ");
  if (parts.length < 3) return ctx.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /login <username> <password>");

  const username = parts[1];
  const password = parts[2];
  ctx.reply("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...");

  try {
    await loginAndSave(ctx.chat.id, username, password);
    ctx.reply("‚úÖ –£—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!");
  } catch {
    ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è");
  }
});

// üîπ –ö–æ–º–∞–Ω–¥–∞ /today
bot.command("today", async (ctx) => {
  const date = getLocalDateString(0);
  const schedule = await getSchedule(ctx.chat.id, date);
  ctx.reply(schedule);
});

// üîπ –ö–æ–º–∞–Ω–¥–∞ /tomorrow
bot.command("tomorrow", async (ctx) => {
  const date = getLocalDateString(1);
  const schedule = await getSchedule(ctx.chat.id, date);
  ctx.reply(schedule);
});

// üîπ –°—Ç–∞—Ä—Ç –±–æ—Ç–∞
(async () => {
  await sequelize.authenticate();
  await User.sync();
  console.log("‚úÖ DB connected, bot starting...");
  bot.start();
})();
